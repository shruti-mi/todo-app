{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoList","props","todos","tasks","map","task","index","active","Todo","content","id","onDelete","onRemove","tasks_length","length","toString","str","className","button","onClick","Addtodo","handleSubmit","e","preventDefault","state","newTask","onAdd","setState","onSubmit","this","type","placeholder","value","onChange","target","React","Component","App","handleAdd","bind","handleDelete","handleRemove","count","activeTasks","completedTasks","addTask","replace","push","i","completed","itemDeleted","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d7015798.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nfunction TodoList(props) {\n  const todos = props.tasks.map((task, index) => {\n      if(props.active == 1)\n        return <Todo content={task} id= {index} active={1} onDelete={props.onDelete} onRemove={props.onRemove}/>\n      else\n        return <Todo content={task} id= {index} active={0} onRemove={props.onRemove}/>\n  });\n\nvar tasks_length = props.tasks.length;\ntasks_length = tasks_length.toString();\n\n\n//---------------------------CONDITIONAL RENDERING---------------------------\n\nif(props.active)\n  var str = \"You have \"+ tasks_length +\" Incompleted todos\";\n\nelse\n  var str = \"You have \"+ tasks_length +\" Completed todos\";\n\n  return  (\n    <div className = 'list-wrapper'>\n      <div className= 'header'>\n        {str}\n      </div>\n      {todos}\n    </div>\n  );\n}\n\n\nfunction Todo(props) {\n\nvar button = <button className= 'delete-item' onClick={() => {props.onRemove(props.id, props.active)}}> Remove </button>\n\n  if(props.active == 1) {\n    return (\n      <div className= 'list-item'>\n        {props.content} \n        <button className= 'delete-item' onClick={() => {props.onDelete(props.id)}}> Mark as done </button>\n        {button}\n      </div>\n    );\n  }\n\n  else {\n    return (\n      <div className= 'list-item'>\n        {props.content} \n        {button}\n      </div>\n    );\n  }\n}\n\n\nclass Addtodo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newTask: ''\n    }\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if(this.state.newTask === '' ) return;\n    this.props.onAdd(this.state.newTask);\n    this.setState({newTask: ''})\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className='add-item'>\n        <input type=\"text\" className='input' placeholder=\"AddTask\" value={this.state.newTask} onChange={(e) => this.setState({ newTask: e.target.value})}/>\n        <button className='button' > AddTodo </button>\n      </form>\n    )\n  }\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleAdd = this.handleAdd.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n   \n    this.state = { \n      count: 0,\n      activeTasks: [ \"task1\", \"task2\", \"task3\"],\n      completedTasks: [\"task4\"]\n      };\n  }\n\n\n  handleAdd(addTask) {\n    if(!addTask.replace(/\\s/g, '').length)return;\n    var active = [...this.state.activeTasks];\n    active.push(addTask);\n\n    this.setState({\n      activeTasks: active\n    });\n  };\n\n\n  handleDelete(i) {\n    var active = [...this.state.activeTasks];\n    var completed = [...this.state.completedTasks];\n    var itemDeleted = active[i];\n\n    active.splice(i, 1);\n    completed.push(itemDeleted);\n\n    this.setState({\n      activeTasks: active,\n      completedTasks: completed\n    });\n  };\n\n\n  handleRemove(i, index) {\n    if(index==1) {\n      var active = [...this.state.activeTasks];\n      active.splice(i, 1);\n\n      this.setState({\n        activeTasks: active\n      });\n    }\n\n    else {\n      var completed = [...this.state.completedTasks];\n      completed.splice(i, 1);\n\n      this.setState({\n        completedTasks: completed\n      });\n    }\n  }\n\n\n  render() {\n  return (\n    <div className=\"wrapper\">\n      <Addtodo onAdd={this.handleAdd}/>\n      <TodoList tasks={this.state.activeTasks} onDelete={this.handleDelete} onRemove={this.handleRemove} active={1}/>\n      <TodoList tasks={this.state.completedTasks} onRemove={this.handleRemove} active={0}/>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}